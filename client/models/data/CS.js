{"101":{"department":"CS","number":"101","title":"Introduction to Computing Principles","description":"Introduces the essential ideas of computing: data representation, algorithms, programming &quot;code&quot;, computer hardware, networking, security, and social issues. Students learn how computers work and what they can do through hands-on exercises. In particular, students will see the capabilities and weaknesses of computer systems so they are not mysterious or intimidating. Course features many small programming exercises, although no prior programming experience is assumed or required. CS101 is not a complete programming course such as CS106A. CS101 is effectively an alternative to CS105. A laptop computer is recommended for the in-class exercises.","min_units":3,"max_units":5,"gers":["DB-EngrAppSci"],"primary":[[],[],[]]},
"103":{"department":"CS","number":"103","title":"Mathematical Foundations of Computing","description":"Mathematical foundations required for computer science, including propositional predicate logic, induction, sets, functions, and relations. Formal language theory, including regular expressions, grammars, finite automata, Turing machines, and NP-completeness. Mathematical rigor, proof techniques, and applications. May not be taken by students who have completed 103A,B or 103X. Prerequisite: 106A or equivalent.","min_units":3,"max_units":5,"gers":["DB-Math","WAY-FR"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"14:15:00","end":"15:30:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"12:50:00","end":"14:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"14:15:00","end":"15:30:00"}]}]]},
"105":{"department":"CS","number":"105","title":"Introduction to Computers","description":"For non-technical majors. What computers are and how they work. Practical experience in programming. Construction of computer programs and basic design techniques. A survey of Internet technology and the basics of computer hardware. Students in technical fields and students looking to acquire programming skills should take 106A or 106X. Students with prior computer science experience at the level of 106 or above require consent of instructor. Prerequisite: minimal math skills.","min_units":3,"max_units":5,"gers":["DB-EngrAppSci","WAY-FR"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"13:15:00","end":"14:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"13:15:00","end":"14:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"13:15:00","end":"14:05:00"}]}]]},
"106A":{"department":"CS","number":"106A","title":"Programming Methodology (ENGR 70A)","description":"Introduction to the engineering of computer applications emphasizing modern software engineering principles: object-oriented design, decomposition, encapsulation, abstraction, and testing. Uses the Java programming language. Emphasis is on good programming style and the built-in facilities of the Java language. No prior programming experience required.","min_units":3,"max_units":5,"gers":["DB-EngrAppSci","WAY-FR"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"15:15:00","end":"16:05:00"},{"days":[true,false,true,false,true],"start":"15:15:00","end":"16:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"11:00:00","end":"11:50:00"}]},{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"15:15:00","end":"16:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"15:15:00","end":"16:05:00"},{"days":[true,false,true,false,true],"start":"15:15:00","end":"16:05:00"}]}]]},
"106B":{"department":"CS","number":"106B","title":"Programming Abstractions (ENGR 70B)","description":"Abstraction and its relation to programming. Software engineering principles of data abstraction and modularity. Object-oriented programming, fundamental data structures (such as stacks, queues, sets) and data-directed design. Recursion and recursive data structures (linked lists, trees, graphs). Introduction to time and space complexity analysis. Uses the programming language C++ covering its basic facilities. Prerequisite: 106A or equivalent.","min_units":3,"max_units":5,"gers":["DB-EngrAppSci","WAY-FR"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"15:15:00","end":"16:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"14:15:00","end":"15:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"15:15:00","end":"16:05:00"}]}]]},
"106L":{"department":"CS","number":"106L","title":"Standard C++ Programming Laboratory","description":"Supplemental lab to 106B and 106X. Additional features of standard C++ programming practice. Possible topics include advanced C++ language features, standard libraries, STL containers and algorithms, object memory management, operator overloading, and inheritance. Prerequisite: consent of instructor. Corequisite: 106B or 106X.","min_units":1,"max_units":1,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"16:15:00","end":"17:05:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"16:15:00","end":"17:05:00"}]}]]},
"106X":{"department":"CS","number":"106X","title":"Programming Abstractions (Accelerated) (ENGR 70X)","description":"Intensive version of 106B for students with a strong programming background interested in a rigorous treatment of the topics at an accelerated pace. Additional advanced material and more challenging projects. Prerequisite: excellence in 106A or equivalent, or consent of instructor.","min_units":3,"max_units":5,"gers":["DB-EngrAppSci","WAY-FR"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"10:00:00","end":"10:50:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"11:00:00","end":"11:50:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"10:00:00","end":"10:50:00"}]}]]},
"107":{"department":"CS","number":"107","title":"Computer Organization and Systems","description":"Introduction to the fundamental concepts of computer systems. Explores how computer systems execute programs and manipulate data, working from the C programming language down to the microprocessor. Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, elements of code compilation, memory organization and management, and performance evaluation and optimization. Prerequisites: 106B or X, or consent of instructor.","min_units":3,"max_units":5,"gers":["DB-EngrAppSci","WAY-FR"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,false,false,true],"start":"12:50:00","end":"14:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"11:00:00","end":"11:50:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,false,false,true],"start":"12:50:00","end":"14:05:00"}]}]]},
"108":{"department":"CS","number":"108","title":"Object-Oriented Systems Design","description":"Software design and construction in the context of large OOP libraries. Taught in Java. Topics: OOP design, design patterns, testing, graphical user interface (GUI) OOP libraries, software engineering strategies, approaches to programming in teams. Prerequisite: 107.","min_units":3,"max_units":4,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"15:15:00","end":"16:30:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"15:15:00","end":"16:30:00"}]}]]},
"109":{"department":"CS","number":"109","title":"Introduction to Probability for Computer Scientists","description":"Topics include: counting and combinatorics, random variables, conditional probability, independence, distributions, expectation, point estimation, and limit theorems. Applications of probability in computer science including machine learning and the use of probability in the analysis of algorithms. Prerequisites: 103, 106B or X, MATH 51 or equivalent.","min_units":3,"max_units":5,"gers":["DB-EngrAppSci","WAY-AQR","WAY-FR"],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"12:50:00","end":"14:05:00"}]}],[]]},
"109L":{"department":"CS","number":"109L","title":"Statistical Computing with R Laboratory","description":"Supplemental lab to CS109.  Introduces the R programming language for statistical computing.  Topics include basic facilities of R including mathematical, graphical, and probability functions, building simulations, introductory data fitting and machine learning.  Provides exposure to the functional programming paradigm.  Corequisite: CS109.","min_units":1,"max_units":1,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"12:50:00","end":"14:05:00"}]}],[]]},
"110":{"department":"CS","number":"110","title":"Principles of Computer Systems","description":"Principles and practice of engineering of computer software and hardware systems. Topics include: techniques for controlling complexity; strong modularity using client-server design, virtual memory, and threads; networks; atomicity and coordination of parallel activities; security, and encryption; and performance optimizations. Prerequisite: 107.","min_units":3,"max_units":5,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"13:15:00","end":"14:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"15:15:00","end":"16:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"13:15:00","end":"14:05:00"}]}]]},
"124":{"department":"CS","number":"124","title":"From Languages to Information (LINGUIST 180, LINGUIST 280)","description":"Automated processing of less structured information: human language text and speech, web pages, social networks, genome sequences, with goal of automatically extracting meaning and structure. Methods include: string algorithms, automata and transducers, hidden Markov models, graph algorithms, XML processing. Applications such as information retrieval, text classification, social network models, machine translation, genomic sequence alignment, word meaning extraction, and speech recognition. Prerequisite: CS103, CS107, CS109.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"16:15:00","end":"17:30:00"}]}],[]]},
"131":{"department":"CS","number":"131","title":"Computer Vision: Foundations and Applications","description":"Robots that can navigate space and perform duties, search engines that can index billions of images and videos, algorithms that can diagnose medical images for diseases, or smart cars that can see and drive safely: Lying in the heart of these modern AI applications are computer vision technologies that can perceive, understand and reconstruct the complex visual world. This course is designed for students who are interested in learning about the fundamental principles and important applications of computer vision. Course will introduce a number of fundamental concepts in computer vision and expose students to a number of real-world applications, plus guide students through a series of well designed projects such that they will get to implement cutting-edge computer vision algorithms. Prerequisites: Students should be familiar with Matlab (i.e. have programmed in Matlab before) and Linux; plus Calculus &amp; Linear Algebra.","min_units":3,"max_units":4,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"09:00:00","end":"10:15:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"09:00:00","end":"10:15:00"}]}]]},
"140":{"department":"CS","number":"140","title":"Operating Systems and Systems Programming","description":"Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems. Prerequisite: CS 110.","min_units":3,"max_units":4,"gers":["DB-EngrAppSci"],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[]]},
"142":{"department":"CS","number":"142","title":"Web Applications","description":"Concepts and techniques used in constructing interactive web applications. Browser-side web facilities such as HTML, cascading stylesheets, javascript, and the document object model. Server-side technologies such as sessions, templates, relational databases, and object-relational mapping. Issues in web security and application scalability. New models of web application deployment. Prerequisites: CS 107 and CS 108.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"11:00:00","end":"11:50:00"}]}],[]]},
"143":{"department":"CS","number":"143","title":"Compilers","description":"Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects. Prerequisites: 103 or 103B, and 107.","min_units":3,"max_units":4,"gers":["DB-EngrAppSci"],"primary":[[],[],[]]},
"144":{"department":"CS","number":"144","title":"Introduction to Computer Networking","description":"Principles and practice. Structure and components of computer networks, packet switching, layered architectures. Applications: web/http, voice-over-IP, p2p file sharing and socket programming. Reliable transport: TCP/IP, reliable transfer, flow control, and congestion control. The network layer: names and addresses, routing. Local area networks: ethernet and switches. Wireless networks and network security. Prerequisite: CS 110.","min_units":3,"max_units":4,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"16:15:00","end":"17:05:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"16:15:00","end":"17:05:00"}]}]]},
"145":{"department":"CS","number":"145","title":"Introduction to Databases","description":"The course covers database design and the use of database management systems for applications. It includes extensive coverage of the relational model, relational algebra, and SQL. It also covers XML data including DTDs and XML Schema for validation, and the query and transformation languages XPath, XQuery, and XSLT. The course includes database design in UML, and relational design principles based on dependencies and normal forms. Many additional key database topics from the design and application-building perspective are also covered: indexes, views, transactions, authorization, integrity constraints, triggers, on-line analytical processing (OLAP), JSON, and emerging NoSQL systems. Class time will include guest speakers from industry and additional advanced topics as time and class interest permits. Prerequisites: 103 and 107 (or equivalent).","min_units":3,"max_units":4,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"11:00:00","end":"12:15:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"11:00:00","end":"12:15:00"}]}]]},
"147":{"department":"CS","number":"147","title":"Introduction to Human-Computer Interaction Design","description":"Introduces fundamental methods and principles for designing, implementing, and evaluating user interfaces. Topics: user-centered design, rapid prototyping, experimentation, direct manipulation, cognitive principles, visual design, social software, software tools. Learn by doing: work with a team on a quarter-long design project, supported by lectures, readings, and studios. Prerequisite: 106B or X or equivalent programming experience.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:45:00"}]}],[]]},
"148":{"department":"CS","number":"148","title":"Introduction to Computer Graphics and Imaging","description":"Introductory prerequisite course in the computer graphics sequence introducing students to the technical concepts behind creating synthetic computer generated images. Focuses on using OpenGL to create visual imagery, as well as an understanding of the underlying mathematical concepts including triangles, normals, interpolation, texture mapping, bump mapping, etc. Course will cover fundamental understanding of light and color, as well as how it impacts computer displays and printers. Class will discuss more thoroughly how light interacts with the environment, constructing engineering models such as the BRDF, plus various simplifications into more basic lighting and shading models. Also covers ray tracing technology for creating virtual images, while drawing parallels between ray tracers and real world cameras to illustrate various concepts. Anti-aliasing and acceleration structures are also discussed. The final class mini-project consists of building out a ray tracer to create visually compelling images. Starter codes and code bits will be provided to aid in development, but this class focuses on what you can do with the code as opposed to what the code itself looks like. Therefore grading is weighted toward in person &quot;demos&quot; of the code in action - creativity and the production of impressive visual imagery are highly encouraged. Prerequisites: CS 107, MATH 51.","min_units":3,"max_units":4,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"09:30:00","end":"10:45:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"09:30:00","end":"10:45:00"}]}]]},
"149":{"department":"CS","number":"149","title":"Parallel Computing","description":"This course is an introduction to parallelism and parallel programming.  Most new computer architectures are parallel; programming these machines requires knowledge of the basic issues of and techniques for writing parallel software. Topics:  varieties of parallelism in current hardware (e.g., fast networks, multicore, accelerators such as GPUs, vector instruction sets), importance of locality, implicit vs. explicit parallelism, shared vs. non-shared memory, synchronization mechanisms (locking, atomicity, transactions, barriers), and parallel programming models (threads, data parallel/streaming, futures, SPMD, message passing, SIMT, transactions, and nested parallelism).  Significant parallel programming assignments will be given as homework.  The course is open to students who have completed the introductory CS course sequence through 110 and have taken CS 143.","min_units":3,"max_units":4,"gers":["DB-EngrAppSci"],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:15:00"}]}],[]]},
"154":{"department":"CS","number":"154","title":"Introduction to Automata and Complexity Theory","description":"Regular languages: finite automata, regular expressions, equivalences among formalisms, methods for proving sets are not regular, streaming algorithms. Turing machines: equivalent forms, undecidability and the Halting Problem, Kolmogorov complexity. Nondeterministic Turing machines: properties, the class NP, complete problems for NP, Cook&#39;s theorem, reducibilities among problems. Advanced complexity topics: oracle Turing machines, the class PSPACE and complete problems. Prerequisites: CS 103 or 103B.","min_units":3,"max_units":4,"gers":["DB-EngrAppSci"],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"14:15:00","end":"15:30:00"}]}],[]]},
"155":{"department":"CS","number":"155","title":"Computer and Network Security","description":"For seniors and first-year graduate students. Principles of computer systems security. Attack techniques and how to defend against them. Topics include: network attacks and defenses, operating system security, application security (web, apps, databases), malware, privacy, and security for mobile devices. Course projects focus on building reliable code. Prerequisite: 140. Recommended: basic Unix.","min_units":3,"max_units":3,"gers":["DB-EngrAppSci"],"primary":[[],[],[]]},
"157":{"department":"CS","number":"157","title":"Logic and Automated Reasoning","description":"An elementary exposition from a computational point of view of propositional and predicate logic, axiomatic theories, and theories with equality and induction. Interpretations, models, validity, proof, strategies, and applications. Automated deduction: polarity, skolemization, unification, resolution, equality. Prerequisite: 103 or 103B.","min_units":3,"max_units":3,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"14:15:00","end":"15:30:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"14:15:00","end":"15:30:00"}]}]]},
"161":{"department":"CS","number":"161","title":"Design and Analysis of Algorithms","description":"Worst and average case analysis. Recurrences and asymptotics. Efficient algorithms for sorting, searching, and selection. Data structures: binary search trees, heaps, hash tables. Algorithm design techniques: divide-and-conquer, dynamic programming, greedy algorithms, amortized analysis, randomization. Algorithms for fundamental graph problems: minimum-cost spanning tree, connected components, topological sort, and shortest paths. Possible additional topics: network flow, string searching. Prerequisite: 103 or 103B; 109 or STATS 116.","min_units":3,"max_units":5,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:15:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:15:00"}]}]]},
"166":{"department":"CS","number":"166","title":"Data Structures","description":"Techniques in the design, analysis, and implementation of data structures.  Isometries between data structures (including red/black trees and 2-3-4 trees), amortized analysis (including Fibonacci heaps and splay trees), and randomization (including count-min sketches and dynamic perfect hash tables).  Data structures for integers and strings (including van Emde Boas trees and suffix trees).  Possible additional topics include functional data structures, concurrent data structures, and spatial data structures.  Prerequisites: CS107 and CS161.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[],[]]},
"170":{"department":"CS","number":"170","title":"Stanford Laptop Orchestra: Composition, Coding, and Performance (MUSIC 128)","description":"Classroom instantiation of the Stanford Laptop Orchestra (SLOrk) which includes public performances. An ensemble of more than 20 humans, laptops, controllers, and special speaker arrays designed to provide each computer-mediated instrument with its sonic identity and presence. Topics and activities include issues of composing for laptop orchestras, instrument design, sound synthesis, programming, and live performance. May be repeated four times for credit.","min_units":1,"max_units":5,"gers":["WAY-CE"],"primary":[[],[],[]]},
"173":{"department":"CS","number":"173","title":"A Computational Tour of the Human Genome","description":"(Only one of 173 or 273A counts toward any CS degree program.) Introduction to computational biology through an informatic exploration of the human genome. Topics include: genome sequencing; functional landscape of the human genome (genes, gene regulation, repeats, RNA genes, epigenetics); genome evolution (comparative genomics, ultraconservation, co-option). Additional topics may include population genetics, personalized genomics, and ancient DNA. Course includes primers on molecular biology, the UCSC Genome Browser, and text processing languages. Guest lectures on current genomic research topics. Class will be similar in spirit to CS273A, which will not be offered this year. Prerequisites: CS107 or equivalent background in programming.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"11:00:00","end":"12:15:00"}]}],[]]},
"178":{"department":"CS","number":"178","title":"Digital Photography","description":"Scientific, artistic, and computing aspects of digital photography. Topics: lenses and optics, light and sensors, optical effects in nature, perspective and depth of field, sampling and noise, the camera as a computing platform, image processing and editing, history of photography, computational photography. Counts as a CS elective in the Graphics track. Prerequisites: introductory calculus; students must have a digital camera with manual control over shutter speed and aperture. Loaner cameras may be available. No programming experience required. GER:DB-EngrAppSci","min_units":3,"max_units":5,"gers":["DB-EngrAppSci"],"primary":[[],[],[]]},
"181":{"department":"CS","number":"181","title":"Computers, Ethics, and Public Policy","description":"(Formerly 201.) Primarily for majors entering computer-related fields. Ethical and social issues related to the development and use of computer technology. Ethical theory, and social, political, and legal considerations. Scenarios in problem areas: privacy, reliability and risks of complex systems, and responsibility of professionals for applications and consequences of their work. Prerequisite: 106B or X.","min_units":4,"max_units":4,"gers":["EC-EthicReas","WAY-ER"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"14:15:00","end":"15:30:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}]]},
"181W":{"department":"CS","number":"181W","title":"Computers, Ethics and Public Policy (WIM)","description":"Writing-intensive version of CS181.  Satisfies the WIM requirement for Computer Science and Computer Systems Engineering undergraduates.","min_units":4,"max_units":4,"gers":["EC-EthicReas"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}]]},
"193P":{"department":"CS","number":"193P","title":"iPhone and iPad Application Programming","description":"Tools and APIs required to build applications for the iPhone and iPad platform using the iOS SDK. User interface designs for mobile devices and unique user interactions using multi-touch technologies. Object-oriented design using model-view-controller paradigm, memory management, Objective-C programming language. Other topics include: object-oriented database API, animation, mobile device power management, multi-threading and performance considerations. Prerequisites: C language and object-oriented programming experience at 106B or X level. Previous completion of any one of the following is required: CS 107, 108 (preferred) or 110. Recommended: CS107, UNIX, graphics, databases.","min_units":3,"max_units":3,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"16:15:00","end":"17:30:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"16:15:00","end":"17:30:00"}]}]]},
"194":{"department":"CS","number":"194","title":"Software Project","description":"Design, specification, coding, and testing of a significant team programming project under faculty supervision. Documentation includes a detailed proposal. Public demonstration of the project at the end of the quarter. Prerequisites: CS 110 and CS 161.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"16:15:00","end":"17:30:00"}]}],[]]},
"194W":{"department":"CS","number":"194W","title":"Software Project (WIM)","description":"Restricted to Computer Science, Computer Systems Engineering, and Electrical Engineering undergraduates.  Writing-intensive version of CS194.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"196":{"department":"CS","number":"196","title":"Computer Consulting","description":"Focus is on Macintosh and Windows operating system maintenance and troubleshooting through hardware and software foundation and concepts. Topics include operating systems, networking, security, troubleshooting methodology with emphasis on Stanford&#39;s computing environment. Not a programming course. Prerequisite: 1C or equivalent.","min_units":2,"max_units":2,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"17:15:00","end":"18:30:00"}]}],[]]},
"198":{"department":"CS","number":"198","title":"Teaching Computer Science","description":"Students lead a discussion section of 106A while learning how to teach a programming language at the introductory level. Focus is on teaching skills, techniques, and course specifics. Application and interview required; see http://cs198.stanford.edu.","min_units":3,"max_units":4,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,false,false,false],"start":"16:15:00","end":"18:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,false,false,false],"start":"16:15:00","end":"18:05:00"}]}],[{"instructors":[],"meeting-times":[{"days":[true,false,false,false,false],"start":"16:15:00","end":"18:05:00"}]}]]},
"202":{"department":"CS","number":"202","title":"Law for Computer Science Professionals","description":"Intellectual property law as it relates to computer science including copyright registration, patents, and trade secrets; contract issues such as non-disclosure/non-compete agreements, license agreements, and works-made-for-hire; dispute resolution; and principles of business formation and ownership. Emphasis is on topics of current interest such as open source and the free software movement, peer-to-peer sharing, encryption, data mining, and spam.","min_units":1,"max_units":1,"gers":[""],"primary":[[],[],[]]},
"205A":{"department":"CS","number":"205A","title":"Mathematical Methods for Robotics, Vision, and Graphics","description":"Continuous mathematics background necessary for research in robotics, vision, and graphics. Possible topics: linear algebra; the conjugate gradient method; ordinary and partial differential equations; vector and tensor calculus. Prerequisites: 106B or X; MATH 51; or equivalents.","min_units":3,"max_units":3,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"16:15:00","end":"17:30:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"16:15:00","end":"17:30:00"}]}]]},
"207":{"department":"CS","number":"207","title":"The Economics of Software","description":"How software products are moved into the marketplace and how the resulting intellectual property is exploited. Concepts that are outside of the common knowledge of computer scientists such as business terms and spreadsheet computations to quantitatively compare alternatives. Goal is to contribute to informed decision making in high-tech product design, acquisition, production, mar-keting, selection of business structures, outsourcing, and impact of taxation policies. No specific background required.","min_units":2,"max_units":2,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,false,false,false,true],"start":"14:15:00","end":"16:05:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,false,false,false,true],"start":"14:15:00","end":"16:05:00"}]}]]},
"210A":{"department":"CS","number":"210A","title":"Software Project Experience with Corporate Partners","description":"Two-quarter project course. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&amp;D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real-world software engineering challenges; public presentation of technical work; creating written descriptions of technical work. Prerequisites: CS 109 and 110.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"16:15:00","end":"17:30:00"}]}],[]]},
"210B":{"department":"CS","number":"210B","title":"Software Project Experience with Corporate Partners","description":"Continuation of CS210A. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&amp;D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of the instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real world software engineering challenges; public presentation of technical work; creating written descriptions of technical work. Prerequisites: CS 210A","min_units":3,"max_units":4,"gers":[""],"primary":[[],[],[]]},
"21N":{"department":"CS","number":"21N","title":"Can Machines Know? Can Machines Feel?","description":"Preference to freshmen. Can mental attitudes attributed to people and sometimes to animals, including knowledge, belief, desire, and intention, also be ascribed to machines? Can light sensors have a belief? Can a pool cleaning robot or tax-preparation software have an intention? If not, why not? If yes, what are the rules of such ascription, and do they vary between human beings and machines? Sources include philosophy, neuroscience, computer science, and artificial intelligence. Topics: logic, probability theory, and elements of computation. Students present a paper.","min_units":3,"max_units":3,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"09:30:00","end":"10:45:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"09:30:00","end":"10:45:00"}]}]]},
"22":{"department":"CS","number":"22","title":"History and Philosophy of Artificial Intelligence (SYMSYS 22)","description":"More than most emerging fields, the history of Artificial Intelligence has been characterized by passionate debates. Is it merely clever programming, or an expedition into the fundamental nature of intelligence? Will machines ever be conscious? Will robots assist or enslave us?  Can self-driving cars be legally responsible for their actions? This course recounts the history of AI and explores the major controversies through a series of classroom discussions, each in preparation for a lively debate by prominent historical figures and cutting-edge researchers in the field. Open to all undergraduate and graduate students.","min_units":2,"max_units":2,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"13:15:00","end":"14:05:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"13:15:00","end":"14:05:00"}]}]]},
"221":{"department":"CS","number":"221","title":"Artificial Intelligence: Principles and Techniques","description":"(Only one of 121 or 221 counts toward any CS degree program.) Topics: search, constraint satisfaction, knowledge representation, probabilistic models, Bayesian networks, machine learning, neural networks, vision, robotics, and natural language processing. Prerequisites: 103 or 103B/X; 106B or 106X; and exposure to probability. Recommended: 107 and facility with basic differential calculus.","min_units":3,"max_units":4,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}]]},
"223A":{"department":"CS","number":"223A","title":"Introduction to Robotics (ME 320)","description":"Robotics foundations in modeling, design, planning, and control. Class covers relevant results from geometry, kinematics, statics, dynamics, motion planning, and control, providing the basic methodologies and tools in robotics research and applications. Concepts and models are illustrated through physical robot platforms, interactive robot simulations, and video segments relevant to historical research developments or to emerging application areas in the field. Recommended: matrix algebra.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[]]},
"224M":{"department":"CS","number":"224M","title":"Multi-Agent Systems","description":"For advanced undergraduates, and M.S. and beginning Ph.D. students. The course serves primarily as an introduction to game theory, including computational aspects. Topics: basic game representations and solution concepts, social choice and mechanism design, multi-agent learning, communication. Applications discussed as appropriate; emphasis is on conceptual matters and theoretical foundations. Prerequisites: very basic probability theory and optimization.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"224N":{"department":"CS","number":"224N","title":"Natural Language Processing (LINGUIST 284)","description":"Methods for processing human language information and the underlying computational properties of natural languages. Syntactic and semantic processing from linguistic and algorithmic perspectives. Focus is on modern quantitative techniques in NLP: using large corpora, statistical models for acquisition, translation, and interpretation; and representative systems. Prerequisites: CS124 or CS121/221.","min_units":3,"max_units":4,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"11:00:00","end":"12:15:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"11:00:00","end":"12:15:00"}]}]]},
"224S":{"department":"CS","number":"224S","title":"Spoken Language Processing (LINGUIST 285)","description":"Introduction to spoken language technology with an emphasis on dialogue and conversational systems. Automatic speech recognition, extraction of affect and social meaning from speech, speech synthesis, dialogue management, and applications to digital assistants, search, and recommender systems. Prerequisites: CS 124, 221, 224N, or 229.","min_units":2,"max_units":4,"gers":[""],"primary":[[],[],[]]},
"224U":{"department":"CS","number":"224U","title":"Natural Language Understanding (LINGUIST 188, LINGUIST 288)","description":"Machine understanding of human language. Computational semantics (determination of word sense and synonymy, event structure and thematic roles, time, aspect, causation, compositional semantics, scopal operators), and computational pragmatics and discourse (coherence, coreference resolution, information packaging, dialogue structure). Theoretical issues, online resources, and relevance to applications including question answering and summarization. Prerequisites: one of LINGUIST 180 / CS 124 / CS 224N,S: and logic such as LINGUIST 130A or B, CS 157, or PHIL150).","min_units":3,"max_units":4,"gers":[""],"primary":[[],[],[]]},
"224W":{"department":"CS","number":"224W","title":"Social and Information Network Analysis","description":"(Formerly 322) How do rumors and information spread? Who are the influencers? Can we predict friendships on Facebook? Networks are the core of the WWW, blogs, Twitter and Facebook. They can be characterized by the complex interplay between information content, millions of individuals and organizations that create it, and the technology that supports it. Course will focus on how to analyze the structure and dynamics of large networks, how to model links, and how design algorithms that work with such large networks. Topics: statistical properties of large networks, models of social network structure and evolution, link prediction, network community detection, diffusion of innovation, information propagation, six-degrees of separation, finding influential nodes in networks, disease outbreak detection, networks with positive and negative ties, and connections with work in the social sciences and economics.","min_units":3,"max_units":4,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"09:30:00","end":"10:45:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"09:30:00","end":"10:45:00"}]}]]},
"225A":{"department":"CS","number":"225A","title":"Experimental Robotics","description":"Hands-on laboratory course experience in robotic manipulation. Topics include robot kinematics, dynamics, control, compliance, sensor-based collision avoidance, and human-robot interfaces. Second half of class is devoted to final projects using various robotic platforms to build and demonstrate new robot task capabilities. Previous projects include the development of autonomous robot behaviors of drawing, painting, playing air hocket, yoyo, basketball, ping-pong or xylophone. Prerequisites: 223A or equivalent.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"227B":{"department":"CS","number":"227B","title":"General Game Playing","description":"A general game playing system accepts a formal description of a game to play it without human intervention or algorithms designed for specific games. Hands-on introduction to these systems and artificial intelligence techniques such as knowledge representation, reasoning, learning, and rational behavior. Students create GGP systems to compete with each other and in external competitions. Prerequisite: programming experience. Recommended: 103 or equivalent.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"228":{"department":"CS","number":"228","title":"Probabilistic Graphical Models: Principles and Techniques","description":"Probabilistic graphical modeling languages for representing complex domains, algorithms for reasoning using these representations, and learning these representations from data. Topics include: Bayesian and Markov networks, extensions to temporal modeling such as hidden Markov models and dynamic Bayesian networks, exact and approximate probabilistic inference algorithms, and methods for learning models from data. Also included are sample applications to various domains including speech recognition, biological modeling and discovery, medical diagnosis, message encoding, vision, and robot motion planning. Prerequisites: basic probability theory and algorithm design and analysis.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"15:15:00","end":"17:05:00"}]}],[]]},
"229":{"department":"CS","number":"229","title":"Machine Learning","description":"Topics: statistical pattern recognition, linear and non-linear regression, non-parametric methods, exponential family, GLMs, support vector machines, kernel methods, model/feature selection, learning theory, VC dimension, clustering, density estimation, EM, dimensionality reduction, ICA, PCA, reinforcement learning and adaptive control, Markov decision processes, approximate dynamic programming, and policy search. Prerequisites: linear algebra, and basic probability and statistics.","min_units":3,"max_units":4,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"09:00:00","end":"10:15:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"09:00:00","end":"10:15:00"}]}]]},
"229A":{"department":"CS","number":"229A","title":"Applied Machine Learning","description":"Covers algorithms that allow computers to learn from data.  Emphasis on practical skills and methods for applying learning techniques and building practical AI/Learning systems.  Course covers commonly used learning techniques (classification, regression, clustering, dimensionality reduction), specific applications (anomaly detection, recommender systems, search), as well as working with big data.  Online, self-paced course. Enrollment limited. Consent of instructor required. Prerequisites: Programming at the level of CS106B or 106X, and basic linear algebra such as Math 51.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,false,false,false],"start":"16:15:00","end":"17:30:00"}]}],[]]},
"229T":{"department":"CS","number":"229T","title":"Statistical Learning Theory (STATS 231)","description":"(Same as STATS 231) For a given learning problem, what methods should be employed, and under what assumptions can we expect them to work? This course focuses on developing algorithms for various scenarios (e.g., high-dimensional, online, unsupervised) as well as theoretical analyses of these algorithms. Topics include kernel methods, generalization bounds, spectral methods, online learning, and nonparametric Bayes. Prerequisites: A solid background in linear algebra and probability theory. Basic exposure to statistics and machine learning (STAT 315A or CS 229), and graphical models (CS 228) is helpful but not essential.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"09:30:00","end":"10:45:00"}]}],[]]},
"231A":{"department":"CS","number":"231A","title":"Introduction to Computer Vision","description":"(Formerly 223B) An introduction to the concepts and applications in computer vision. Topics include: cameras and projection models, low-level image processing methods such as filtering and edge detection; mid-level vision topics such as segmentation and clustering; shape reconstruction from stereo, as well as high-level vision tasks such as object recognition, scene recognition, face detection and human motion categorization. Prerequisites: linear algebra, basic probability and statistics.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:15:00"}]}],[]]},
"231B":{"department":"CS","number":"231B","title":"The Cutting Edge of Computer Vision","description":"(Formerly 223C) More than one-third of the brain is engaged in visual processing, the most sophisticated human sensory system. Yet visual recognition technology has fundamentally influenced our lives on the same scale and scope as text-based technology has, thanks to Google, Twitter, Facebook, etc. This course is designed for those students who are interested in cutting edge computer vision research, and/or are aspiring to be an entrepreneur using vision technology. Course will guide students through the design and implementation of three core vision technologies: segmentation, detection and classification on three highly practical, real-world problems. Course will focus on teaching the fundamental theory, detailed algorithms, practical engineering insights, and guide them to develop state-of-the-art systems evaluated based on the most modern and standard benchmark datasets. Prerequisites: CS2223B or equivalent and a good machine learning background (i.e. CS221, CS228, CS229). Fluency in Matlab and C/C++.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"232":{"department":"CS","number":"232","title":"Digital Image Processing (EE 368)","description":"Image sampling and quantization color, point operations, segmentation, morphological image processing, linear image filtering and correlation, image transforms, eigenimages, multiresolution image processing, noise reduction and restoration, feature extraction and recognition tasks, image registration. Emphasis is on the general principles of image processing. Students learn to apply material by implementing and investigating image processing algorithms in Matlab and optionally on Android mobile devices. Term project. In the fall and spring quarter, a sequence of interactive web/video modules substitutes the classroom lectures. In the winter quarter, the course is taught conventionally; both versions of the course are equivalent. Recommended: EE261, EE278B.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"14:15:00","end":"15:05:00"}]}],[]]},
"240":{"department":"CS","number":"240","title":"Advanced Topics in Operating Systems","description":"Recent research. Classic and new papers. Topics: virtual memory management, synchronization and communication, file systems, protection and security, operating system extension techniques, fault tolerance, and the history and experience of systems programming. Prerequisite: 140 or equivalent.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"16:15:00","end":"17:30:00"}]}],[]]},
"240E":{"department":"CS","number":"240E","title":"Embedded Wireless Systems","description":"The structure and implementation of hardware/software systems for low power embedded sensors; how to build hardware/software systems that can run unattended for years on small batteries. Topics: hardware trends, energy profiles, execution models, sensing, aggregation, storage, application requirements, allocation, power management, resource management, scheduling, time synchronization, programming models, software design, and fault tolerance. Students discuss papers and research a final project building working systems on low-power embedded devices.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"240H":{"department":"CS","number":"240H","title":"Functional Systems in Haskell","description":"Covers an array of practical issues and techniques that arise when building real-world systems in the Haskell programming language. Topics include the basics of Haskell, laziness, monads, parsers, testing and debugging, performance tuning, interfacing to native code, concurrency and I/O paradigms, language extensions, meta-programming, and applications to the web and security. Concepts will be reinforced through a few individual programming assignments followed by a larger team project. Prior familiarity with Haskell may be helpful but is not required. Prerequisites: CS106B or 106X.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[],[]]},
"242":{"department":"CS","number":"242","title":"Programming Languages","description":"Central concepts in modern programming languages, impact on software development, language design trade-offs, and implementation considerations. Functional, imperative, and object-oriented paradigms. Formal semantic methods and program analysis. Modern type systems, higher order functions and closures, exceptions and continuations. Modularity, object-oriented languages, and concurrency. Runtime support for language features, interoperability, and security issues. Prerequisite: 107, or experience with Lisp, C, and an object-oriented language.","min_units":3,"max_units":3,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}]]},
"243":{"department":"CS","number":"243","title":"Program Analysis and Optimizations","description":"Program analysis techniques used in compilers and software development tools to improve productivity, reliability, and security. The methodology of applying mathematical abstractions such as graphs, fixpoint computations, binary decision diagrams in writing complex software, using compilers as an example. Topics include data flow analysis, instruction scheduling, register allocation, parallelism, data locality, interprocedural analysis, and garbage collection. Prerequisites: 103 or 103B, and 107.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"11:00:00","end":"12:15:00"}]}],[]]},
"244":{"department":"CS","number":"244","title":"Advanced Topics in Networking","description":"Classic papers, new ideas, and research papers in networking. Architectural principles: naming, addressing, routing; congestion control, traffic management, QoS; wireless and mobility; overlay networks and virtualization; network security; switching and routing; content distribution; and proposals for future Internet structures. Prerequisite: 144 or equivalent.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[]]},
"244B":{"department":"CS","number":"244B","title":"Distributed Systems","description":"Distributed operating systems and applications issues, emphasizing high-level protocols and distributed state sharing as the key technologies. Topics: distributed shared memory, object-oriented distributed system design, distributed directory services, atomic transactions and time synchronization, application-sufficient consistency, file access, process scheduling, process migration, and storage/communication abstractions on distribution, scale, robustness in the face of failure, and security.  Prerequisites: CS 144 and CS 249A.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"244E":{"department":"CS","number":"244E","title":"Networked Wireless Systems (EE 384E)","description":"Design and implementation of wireless networks and mobile systems. The course will commence with a short retrospective of wireless communication and initially touch on some of the fundamental physical layer properties of various wireless communication technologies. The focus will then shift to design of media access control and routing layers for various wireless systems. The course will also examine adaptations necessary at transport and higher layers to cope with node mobility and error-prone nature of the wireless medium. Finally, it will conclude with a brief overview of other related issues including emerging wireless/mobile applications. Prerequisites: EE 284","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"11:00:00","end":"12:15:00"}]}],[]]},
"245":{"department":"CS","number":"245","title":"Database Systems Principles","description":"File organization and access, buffer management, performance analysis, and storage management. Database system architecture, query optimization, transaction management, recovery, concurrency control. Reliability, protection, and integrity. Design and management issues. Prerequisites: 145, 161.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"12:50:00","end":"14:05:00"}]}],[]]},
"246":{"department":"CS","number":"246","title":"Mining Massive Data Sets","description":"Distributed file systems: Hadoop, map-reduce; PageRank, topic-sensitive PageRank, spam detection, hubs-and-authorities; similarity search; shingling, minhashing, random hyperplanes, locality-sensitive hashing; analysis of social-network graphs; association rules; dimensionality reduction: UV, SVD, and CUR decompositions; algorithms for very-large-scale mining: clustering, nearest-neighbor search, gradient descent, support-vector machines, classification, and regression; submodular function optimization. Prerequisites: At lease one of CS107 or CS145; at least one of CS109 or STAT116, or equivalent.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"09:30:00","end":"10:45:00"}]}],[]]},
"247":{"department":"CS","number":"247","title":"Human-Computer Interaction Design Studio","description":"Project-based focus on interaction design process, especially early-stage design and rapid prototyping. Methods used in interaction design including needs analysis, user observation, sketching, concept generation, scenario building, and evaluation. Prerequisites: 147 and 106A or equivalent background in programming.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[],[]]},
"247L":{"department":"CS","number":"247L","title":"Human Computer Interaction Technology Laboratory","description":"Hands-on introduction to contemporary HCI technologies. Interaction design with Adobe Flash, mobile development, physical computing, and web applications. Corequisite: 247.","min_units":1,"max_units":1,"gers":[""],"primary":[[],[],[]]},
"248":{"department":"CS","number":"248","title":"Interactive Computer Graphics","description":"This is the second course in the computer graphics sequence, and as such it assumes a strong familiarity with rendering and image creation. The course has a strong focus on computational geometry, animation, and simulation. Topics include splines, implicit surfaces, geometric modeling, collision detection, animation curves, particle systems and crowds, character animation, articulation, skinning, motion capture and editing, rigid and deformable bodies, and fluid simulation. As a final project, students implement an interactive video game utilizing various concepts covered in the class. Games may be designed on mobile devices, in a client/server/browser environment, or on a standard personal computer. Prerequisite: CS148.","min_units":3,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"09:30:00","end":"10:45:00"}]}],[]]},
"249A":{"department":"CS","number":"249A","title":"Object-Oriented Programming from a Modeling and Simulation Perspective","description":"Topics: large-scale software development approaches for complex applications, class libraries and frameworks; encapsulation, use of inheritance and dynamic dispatch, design of interfaces and interface/implementation separation, exception handling, smart pointers and reference management, minimalizing dependencies and value-oriented programming. Inheritance: when and why multiple inheritance naming, directories, manager, and disciplined use of design patterns including functors, event notification and iterators. Prerequisites: C, C++, and programming methodology as developed in 106B or X, and 107 (107 may be taken concurrently). Recommended: 193D.","min_units":3,"max_units":3,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:15:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:15:00"}]}]]},
"254":{"department":"CS","number":"254","title":"Computational Complexity","description":"An introduction to computational complexity theory. The P versus NP problem; diagonalization and relativization; space complexity, Savitch&#39;s algorithm, NL=coNL, Reingold&#39;s algorithm; counting problem and #P-completeness; circuit complexity; pseudorandomness, derandomixation, and the Natural Proofs barrier; complexity of approximation; quantum computing. Prerequisites: 154 or equivalent; mathematical maturity.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"14:15:00","end":"15:30:00"}]}],[]]},
"255":{"department":"CS","number":"255","title":"Introduction to Cryptography","description":"For advanced undergraduates and graduate students. Theory and practice of cryptographic techniques used in computer security. Topics: encryption (symmetric and public key), digital signatures, data integrity, authentication, key management, PKI, zero-knowledge protocols, and real-world applications. Prerequisite: basic probability theory.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[]]},
"259":{"department":"CS","number":"259","title":"Security Analysis of Network Protocols","description":"General methods for security modeling and analysis, illustrated using network protocol security. Common security protocols and their properties including secrecy, authentication, key establishment, and fairness. Fully automated, finite-state, model-checking techniques. Constraint solving, process algebras, protocol logics, probabilistic model checking, and game theory. Students select a protocol, web component, hardware architecture, or other system to analyze, specify it in a chosen model, use an analysis tool or method to find vulnerabilities and verify properties, and present findings.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"12:50:00","end":"14:05:00"}]}],[]]},
"261":{"department":"CS","number":"261","title":"Optimization and Algorithmic Paradigms","description":"Algorithms for network optimization: max-flow, min-cost flow, matching, assignment, and min-cut problems. Introduction to linear programming. Use of LP duality for design and analysis of algorithms. Approximation algorithms for NP-complete problems such as Steiner Trees, Traveling Salesman, and scheduling problems. Randomized algorithms. Introduction to online algorithms. Prerequisite: 161 or equivalent.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:15:00"}]}],[]]},
"262":{"department":"CS","number":"262","title":"Computational Genomics (BIOMEDIN 262)","description":"Applications of computer science to genomics, and concepts in genomics from a computer science point of view. Topics: dynamic programming, sequence alignments, hidden Markov models, Gibbs sampling, and probabilistic context-free grammars. Applications of these tools to sequence analysis: comparative genomics, DNA sequencing and assembly, genomic annotation of repeats, genes, and regulatory sequences, microarrays and gene expression, phylogeny and molecular evolution, and RNA structure. Prerequisites: 161 or familiarity with basic algorithmic concepts. Recommended: basic knowledge of genetics.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:30:00"}]}],[]]},
"263":{"department":"CS","number":"263","title":"Algorithms for Modern Data Models (MS&E 317)","description":"We traditionally think of algorithms as running on data available in a single location, typically main memory. In many modern applications including web analytics, search and data mining, computational biology, finance, and scientific computing, the data is often too large to reside in a single location, is arriving incrementally over time, is noisy/uncertain, or all of the above. Paradigms such as map-reduce, streaming, sketching, Distributed Hash Tables, Bulk Synchronous Processing, and random walks have proved useful for these applications. This course will provide an introduction to the design and analysis of algorithms for these modern data models. Prerequisite: Algorithms at the level of CS 261.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[]]},
"265":{"department":"CS","number":"265","title":"Randomized Algorithms and Probabilistic Analysis (CME 309)","description":"Randomness pervades the natural processes around us---from the formation of  networks, to genetic recombination, to quantum physics.  Randomness is also a powerful tool that we can leverage to create algorithms and data structures which, in many cases, are more efficient and simpler than their deterministic counterparts.  This course will cover the key tools of probabilistic analysis, and will apply these tools to understand the behaviors of random processes and algorithms.  The emphasis of the course is on theoretical foundations, though we will apply this theory broadly, discussing applications in machine learning and data analysis, networking, and systems.  Topics include tail bounds, the probabilistic method, Markov chains, and martingales, with applications to analyzing random graphs, metric embeddings, random walks, and a host of powerful and elegant randomized algorithms. Prerequisites: CS 161 and STAT 116, or equivalents and instructor consent.","min_units":3,"max_units":3,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:15:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"11:00:00","end":"12:15:00"}]}]]},
"266":{"department":"CS","number":"266","title":"Parameterized Algorithms and Complexity","description":"An introduction to the area of parameterized algorithms and complexity, which explores multidimensional methods for measuring the difficulty and feasibility of solving computational problems. Topics include: fixed-parameter tractability (FPT) and its characterizations, FPT algorithms for hard problems, the W-hierarchy (W[1], W[2], W[P], and complete problems for these classes), and the relationships between parameterized questions and classical theory questions. Prerequisites: CS 154 and 161 or the equivalent mathematical maturity.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"268":{"department":"CS","number":"268","title":"Geometric Algorithms","description":"Techniques for design and analysis of efficient geometric algorithms for objects in 2-, 3-, and higher dimensions. Topics: convexity, triangulations and simplicial complexes, sweeping, partitioning, and point location. Voronoi/Delaunay diagrams and their properties. Arrangements of curves and surfaces. Intersection and visibility problems. Geometric searching and optimization. Random sampling methods. Impact of numerical issues in geometric computation. Example applications to robotic motion planning, visibility preprocessing and rendering in graphics, model-based recognition in computer vision, and structural molecular biology. Prerequisite: discrete algorithms at the level of 161. Recommended: 164.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"270":{"department":"CS","number":"270","title":"Modeling Biomedical Systems: Ontology, Terminology, Problem Solving (BIOMEDIN 210)","description":"Methods for modeling biomedical systems and for making those models explicit in the context of building software systems. Emphasis is on intelligent systems for decision support and Semantic Web applications. Topics: knowledge representation, controlled terminologies, ontologies, reusable problem solvers, and knowledge acquisition. Recommended: exposure to object-oriented systems, basic biology.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"14:15:00","end":"15:30:00"}]}],[]]},
"272":{"department":"CS","number":"272","title":"Introduction to Biomedical Informatics Research Methodology (BIOE 212, BIOMEDIN 212, GENE 212)","description":"Hands-on software building. Student teams conceive, design, specify, implement, evaluate, and report on a software project in the domain of biomedicine. Creating written proposals, peer review, providing status reports, and preparing final reports. Guest lectures from professional biomedical informatics systems builders on issues related to the process of project management. Software engineering basics. Prerequisites: BIOMEDIN 210, 211, 214, 217 or consent of instructor.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"273A":{"department":"CS","number":"273A","title":"A Computational Tour of the Human Genome (BIOMEDIN 273A, DBIO 273A)","description":"Introduction to computational biology through an informatic exploration of the human genome. Topics include: genome sequencing (technologies, assembly, personalized sequencing); functional landscape (genes, gene regulation, repeats, RNA genes, epigenetics); genome evolution (comparative genomics, ultraconservation, co-option). Additional topics may include population genetics, personalized genomics, and ancient DNA. Course includes primers on molecular biology, the UCSC Genome Browser, and text processing languages. Guest lectures from genomic researchers. No prerequisites. See http://cs273a.stanford.edu/.","min_units":3,"max_units":3,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"12:50:00","end":"14:05:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"12:50:00","end":"14:05:00"}]}]]},
"274":{"department":"CS","number":"274","title":"Representations and Algorithms for Computational Molecular Biology (BIOE 214, BIOMEDIN 214, GENE 214)","description":"Topics: introduction to bioinformatics and computational biology, algorithms for alignment of biological sequences and structures, computing with strings, phylogenetic tree construction, hidden Markov models, Gibbs Sampling, basic structural computations on proteins, protein structure prediction, protein threading techniques, homology modeling, molecular dynamics and energy minimization, statistical analysis of 3D biological data, integration of data sources, knowledge representation and controlled terminologies for molecular biology, microarray analysis, machine learning (clustering and classification), and natural language text processing. Prerequisites: programming skills; consent of instructor for 3 units.","min_units":3,"max_units":4,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"16:15:00","end":"17:30:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"16:15:00","end":"17:30:00"}]}]]},
"275":{"department":"CS","number":"275","title":"Translational Bioinformatics (BIOMEDIN 217)","description":"Analytic, storage, and interpretive methods to optimize the transformation of genetic, genomic, and biological data into diagnostics and therapeutics for medicine. Topics: access and utility of publicly available data sources; types of genome-scale measurements in molecular biology and genomic medicine; analysis of microarray data; analysis of polymorphisms, proteomics, and protein interactions; linking genome-scale data to clinical data and phenotypes; and new questions in biomedicine using bioinformatics. Case studies. Prerequisites: programming ability at the level of CS 106A and familiarity with statistics and biology.","min_units":4,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"14:15:00","end":"15:30:00"}]}],[]]},
"275A":{"department":"CS","number":"275A","title":"Symbolic Musical Information (MUSIC 253)","description":"Focus on symbolic data for music applications including advanced notation systems, optical music recognition, musical data conversion, and internal structure of MIDI files.","min_units":2,"max_units":4,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"13:15:00","end":"15:05:00"}]}],[]]},
"275B":{"department":"CS","number":"275B","title":"Music Query, Analysis, and Style Simulation (MUSIC 254)","description":"Leveraging off three synchronized sets of symbolic data resources for notation and analysis, the lab portion introduces students to the open-source Humdrum Toolkit for music representation and analysis.  Issues of data content and quality as well as methods of information retrieval, visualization, and summarization are considered in class. Grading based primarily on student projects. Prerequisite: 253 or consent of instructor.","min_units":2,"max_units":4,"gers":[""],"primary":[[],[],[]]},
"276":{"department":"CS","number":"276","title":"Information Retrieval and Web Search (LINGUIST 286)","description":"Text information retrieval systems; efficient text indexing; Boolean, vector space, and probabilistic retrieval models; ranking and rank aggregation; evaluating IR systems. Text clustering and classification: classification algorithms, latent semantic indexing, taxonomy induction; Web search engines including crawling and indexing, link-based algorithms, and web metadata. Prerequisites: CS 107, CS 109, CS 161.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[],[]]},
"45N":{"department":"CS","number":"45N","title":"Computers and Photography: From Capture to Sharing","description":"Preference to freshmen with experience in photography and use of computers. Elements of photography, such as lighting, focus, depth of field, aperture, and composition. How a photographer makes photos available for computer viewing, reliably stores them, organizes them, tags them, searches them, and distributes them online. No programming experience required. Digital SLRs and editing software will be provided to those students who do not wish to use their own.","min_units":3,"max_units":4,"gers":["WAY-CE"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"13:15:00","end":"15:05:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"13:15:00","end":"15:05:00"}]}]]},
"54N":{"department":"CS","number":"54N","title":"Great Ideas in Computer Science","description":"Stanford Introductory Seminar. Preference to freshmen. Covers the intellectual tradition of computer science emphasizing ideas that reflect the most important milestones in the history of the discipline.  No prior experience with programming is assumed.  Topics include programming and problem solving; implementing computation in hardware; algorithmic efficiency; the theoretical limits of computation; cryptography and security; and the philosophy behind artificial intelligence.","min_units":3,"max_units":3,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"19:00:00","end":"20:15:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"19:00:00","end":"20:15:00"}]}]]},
"56N":{"department":"CS","number":"56N","title":"Great Discoveries and Inventions in Computing","description":"This seminar will explore some of both the great discoveries that underlie computer science and the inventions that have produced the remarkable advances in computing technology. Key questions we will explore include: What is computable? How can information be securely communicated? How do computers fundamentally work? What makes computers fast? Our exploration will look both at the principles behind the discoveries and inventions, as well as the history and the people involved in those events. Some exposure to programming will be helpful, but it not strictly necessary.","min_units":3,"max_units":3,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"13:15:00","end":"14:30:00"}]}],[]]},
"73N":{"department":"CS","number":"73N","title":"The Business of the Internet","description":"Preference to freshmen. Issues in Internet history, technology, and public policy are discussed and analyzed as well as the Internet&#39;s impact on commerce, education, government, and health care. Writing for the web is emphasized. Participants develop a substantial website to satisfy PWR2.","min_units":3,"max_units":3,"gers":["DB-EngrAppSci","Writing 2"],"primary":[[],[],[]]},
"74N":{"department":"CS","number":"74N","title":"Digital Dilemmas","description":"Preference to freshmen. Issues where policy decision making requires understanding computer and communications technology. Technology basics taught in non-technology terms. Topics include consumer privacy, government surveillance, file sharing and intellectual property, and electronic voting.","min_units":3,"max_units":3,"gers":["DB-EngrAppSci"],"primary":[[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"15:15:00","end":"16:30:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[false,true,false,true,false],"start":"15:15:00","end":"16:30:00"}]}]]},
"77":{"department":"CS","number":"77","title":"Interaction Design Basics","description":"Reduced version of CS 147, focusing on interaction, not implementation. As an introduction to the methods and principles of designing user interfaces, the course will cover topics such as needfinding, rapid prototyping, visual design, and interface evaluation. In addition to weekly lectures and quizzes, assignments culminate in a final design project consisting of an interactive prototype of a web application. Prerequisites: none.","min_units":2,"max_units":2,"gers":[""],"primary":[[],[{"instructors":[],"meeting-times":[{"days":[true,false,false,false,false],"start":"14:15:00","end":"15:45:00"}]}],[]]},
"90SI":{"department":"CS","number":"90SI","title":"Code the Change: Learn Web Development Through Nonprofit Projects","description":"Learn web technologies by working on real-world projects with non-profit partners. The class will cover basic topics and provide resources for more advanced learning. Students will work in small teams to implement high-impact projects for non-profit organizations. Recommended prerequisite: CS 106B.","min_units":2,"max_units":2,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"13:15:00","end":"14:05:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,true],"start":"13:15:00","end":"14:05:00"}]}]]},
"99SI":{"department":"CS","number":"99SI","title":"Callback Me Maybe: Contemporary JavaScript","description":"Covers fundamentals and contemporary applications of the JavaScript programming language. Course focuses on introducing JavaScript through in-class demos and programming assignments based on real-world applications (e.g. Yelp, Google, Reddit, etc). Topics include: Fundamental syntax/semantics, event-based programming, document-object-model (DOM), application programming interfaces (APIs), asynchronous JavaScript and XML (AJAX), jQuery, Node.js, and WebSockets. Prerequisite: CS107.","min_units":2,"max_units":2,"gers":[""],"primary":[[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"15:15:00","end":"16:05:00"}]}],[],[{"instructors":[],"meeting-times":[{"days":[true,false,true,false,false],"start":"15:15:00","end":"16:05:00"}]}]]}}